#+title: Exercise1.2
#+date: <2019-06-01 Sat>
#+author: responsible
* 1.2 [8/20]
** DONE 1.9
   CLOSED: [2019-06-05 Wed 00:20]
#+begin_src scheme
  ;; recursive
  (define (+ a b)
    (if (= a 0)
        b
        (inc (+ (dec a) b))))

  (+ 4 5)
  (inc (+ 3 5))
  (inc (inc (+ 2 5)))
  (inc (inc (inc (+ 1 5))))
  (inc (inc (inc (inc (+ 0 5)))))
  (inc (inc (inc (inc 5))))
  (inc (inc (inc 6)))
  (inc (inc 7))
  (inc 8)
  9
#+end_src

#+begin_src scheme
  ;; iteration
  (define (+ a b)
    (if (= a 0)
        b
        (+ (dec a) (inc b))))

  (+ 4 5)
  (+ 3 6)
  (+ 2 7)
  (+ 1 8)
  (+ 0 9)
  9
#+end_src

** DONE 1.10
   CLOSED: [2019-06-05 Wed 00:20]
#+begin_src scheme :results output
  (define (A x y)
    (cond ((= y 0) 0)
          ((= x 0) (* 2 y))
          ((= y 1) 2)
          (else (A (- x 1)
                   (A x (- y 1))))))

  (println (A 1 10))
  (A 1 10)
  (A 0 (A 1 9))
  (A 0 (A 0 (A 1 8)))
  (A 0 (A 0 (A 0 (A 1 7))))
  (A 0 (A 0 (A 0 (A 0 (A 1 6)))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 5))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 4)))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 3))))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 2)))))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 1))))))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 2)))))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 4))))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 8)))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 16))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 32)))))
  (A 0 (A 0 (A 0 (A 0 64))))
  (A 0 (A 0 (A 0 128)))
  (A 0 (A 0 256))
  (A 0 512)
  1024

  (println (A 2 4))
  (A 2 4)
  (A 1 (A 2 3))
  (A 1 (A 1 (A 2 2)))
  (A 1 (A 1 (A 1 (A 2 1))))
  (A 1 (A 1 (A 1 2)))
  (A 1 (A 1 (A 0 (A 1 1))))
  (A 1 (A 1 (A 0 2)))
  (A 1 (A 1 4))
  (A 1 (A 0 (A 1 3)))
  (A 1 (A 0 (A 0 (A 1 2))))
  (A 1 (A 0 (A 0 (A 0 (A 1 1)))))
  (A 1 (A 0 (A 0 (A 0 2))))
  (A 1 (A 0 (A 0 4)))
  (A 1 (A 0 8))
  (A 1 16)
  ;; same logic with (A 1 10)
  65536

  (println (A 3 3))
  (A 3 3)
  (A 2 (A 3 2))
  (A 2 (A 2 (A 3 1)))
  (A 2 (A 2 2))
  ;; same logic with third step of (A 2 4)
  (A 2 4)
  65536

  ;; 2n
  (define (f n) (A 0 n))

  ;; 2ⁿ
  (define (g n) (A 1 n))
  ;; (A 1 n)
  ;; (A 0 (A 1 n-1))

  ;;   ₂
  ;; 2²
  (define (h n) (A 2 n))
  ;; (A 2 n)
  ;; (A 1 (A 2 n-1))
  ;; (A 1 (A 2 2))
  ;; (A 1 (A 2 4))
#+end_src

** DONE 1.11
   CLOSED: [2019-06-05 Wed 00:20]
#+begin_src scheme :exports both
  ;; recursive
  (define (f n)
    (if (< n 3)
        n
        (+ (f (- n 1))
           (* (f (- n 2)) 2)
           (* (f (- n 3)) 3))))
#+end_src
#+begin_src scheme
  ;; iteration
  (define (f n)
    (define (iter a b c count)
      (if (= count 0)
          c
          (iter b
                c
                (+ c
                   (* b 2)
                   (* a 3))
                (- count 1))))

    (if (< n 3)
        n
        (iter 0 1 2 (- n 2))))

  (f 1)
#+end_src

#+RESULTS:
: 1

** DONE 1.12
   CLOSED: [2019-06-13 Thu 19:00]
#+begin_src scheme :results output :exports both
  (define (pascal-triangle n)
    (define (pascal-triangle-element x y)
      (if (or (= y 1) (= x y))
          1
          (+ (pascal-triangle-element (- x 1) (- y 1))
             (pascal-triangle-element (- x 1) y))))

    (define (line-maker n)
      (define (element-iter i)
        (if (<= i n)
            (string-append (number->string (pascal-triangle-element n i))
                           " "
                           (element-iter (+ i 1)))
            ""))
      (element-iter 1))

    (define (triangle-maker n)
      (define (line-iter i)
        (when (<= i n)
          (display (string-append (build-string (- n i) (λ(i) #\space))
                                  (line-maker i)))
          (newline)
          (line-iter (+ i 1))))
      (line-iter 1))

    (triangle-maker n))

  (pascal-triangle 5)
#+end_src

#+RESULTS:
:     1
:    1 1
:   1 2 1
:  1 3 3 1
: 1 4 6 4 1

** TODO 1.13

** TODO 1.14
how to calculate order of time

** TODO 1.15
1) (sine 12.15)
2)
3)

** TODO 1.16
#+begin_src scheme
  (define (exp b n)
    (define (iter b n a)
      (iter b n a))
    (exp b n 1))
#+end_src

** TODO 1.17

** TODO 1.18

** TODO 1.19

** DONE 1.20
   CLOSED: [2019-06-05 Wed 00:21]
#+begin_src scheme
  (define (gcd a b)
    (if (= b 0)
        a
        (gcd b (remainder a b))))
#+end_src
#+begin_src scheme
  ;; normal order - 18 times
  (gcd 206 40)

  (gcd 40 (remainder 206 40))

  (if (= (remainder 206 40) 0)
      40
      (gcd (remainder 206 40)
           (remainder 40 (remainder 206 40))))

  (gcd (remainder 206 40)
       (remainder 40 (remainder 206 40)))

  (if (= (remainder 40 (remainder 206 40)) 0)
      (remainder 206 40)
      (gcd (remainder 40 (remainder 206 40))
           (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))))

  (gcd (remainder 40 (remainder 206 40))
       (remainder (remainder 206 40) (remainder 40 (remainder 206 40))))

  (if (= (remainder (remainder 206 40) (remainder 40 (remainder 206 40))) 0)
      (remainder 40 (remainder 206 40))
      (gcd (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))
           (remainder (remainder 40 (remainder 206 40)) (remainder (remainder 206 40) (remainder 40 (remainder 206 40))))))

  (gcd (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))
       (remainder (remainder 40 (remainder 206 40)) (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))))

  (if (= (remainder (remainder 40 (remainder 206 40)) (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))) 0)
      (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))
      (gcd (remainder (remainder 40 (remainder 206 40)) (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))) (remainder (remainder (remainder 206 40) (remainder 40 (remainder 206 40))) (remainder (remainder 40 (remainder 206 40)) (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))))))

  (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))

  2
#+end_src
#+begin_src scheme
  ;; applicative order - 4 times
  (gcd 206 40)
  (gcd 40 (remainder 206 40))
  (gcd 40 6)
  (gcd 6 (remainder 40 6))
  (gcd 6 4)
  (gcd 4 (remainder 6 4))
  (gcd 4 2)
  (gcd 2 (remainder 4 2))
  (gcd 2 0)
  2
#+end_src

** DONE 1.21
   CLOSED: [2019-06-05 Wed 00:21]
#+begin_src scheme
  (define (smallest-divisor n)
    (find-divisor n 2))
  (define (find-divisor n test-divisor)
    (cond ((> (square test-divisor) n) n)
          ((divides? test-divisor n) test-divisor)
          (else (find-divisor n (+ test-divisor 1)))))
  (define (divides? a b)
    (= (remainder b a) 0))
  (define (square n)
    (* n n))

  (define (prime? n)
    (= n (smallest-divisor n)))
#+end_src
- smallest divisor of 199: 199
- smallest divisor of 1999: 1999
- smallest divisor of 19999: 7

** TODO 1.22
#+begin_src scheme :results output :exports both
  (define (divides? a b)
    (= (remainder b a) 0))
  (define (square n)
    (* n n))
  (define (find-divisor n test-divisor)
    (cond ((> (square test-divisor) n) n)
          ((divides? test-divisor n) test-divisor)
          (else (find-divisor n (+ test-divisor 1)))))
  (define (smallest-divisor n)
    (find-divisor n 2))
  (define (prime? n)
    (= n (smallest-divisor n)))

  (define (timed-prime-test n)
    (newline)
    (display n)
    (start-prime-test n (current-inexact-milliseconds)))
  (define (start-prime-test n start-time)
    (when (prime? n)
      (define (start-prime-test n start-time)
        (when (prime? n)
          (report-prime (- (current-inexact-milliseconds) start-time))))
      (define (report-prime elapsed-time)
        (display " *** ")
        (display elapsed-time))
      (report-prime (- (current-inexact-milliseconds) start-time))))
  (define (report-prime elapsed-time)
    (display " *** ")
    (display elapsed-time))


  (define (search-for-primes start end)
    (when (< start end)
      (when (odd? start) (timed-prime-test start))
      (search-for-primes (+ start 1) end)))

  (search-for-primes 1000 9999)
  (search-for-primes 10000 99999)
  (search-for-primes 100000 999999)
  (search-for-primes 1000000 9999999)
#+end_src

#+RESULTS:

** TODO 1.23

** TODO 1.24

** TODO 1.25

** DONE 1.26
   CLOSED: [2019-06-05 Wed 00:22]
#+begin_src scheme
  ;; origin code
  (define (expmod base exp m)
    (cond ((= exp 0) 1)
          ((even? exp)
           (remainder (square (expmod base (/ exp 2) m))
                      m))
          (else
           (remainder (* base (expmod base (- exp 1) m))
                      m))))
#+end_src
~(square (expmod base (/ exp 2) m))~ will calculate ~(expmod ...)~ first, so it will calculate expmod once.
But use ~*~ instead of ~square~ will calculate ~(exmod ...)~ twice, and it's a Θ(n) process.

** DONE 1.27
   CLOSED: [2019-06-05 Wed 00:22]
#+begin_src scheme :results output :exports both
  (define (check-carmichael n)
    (define (iter start n)
      (if (= start n)
          (println (string-append (number->string n) " " "is a carmichael number"))
          (if (same-mod start n)
              (iter (+ start 1) n)
              (println (string-append (number->string n) " " "is not a carmichael number")))))

    (define (same-mod a n)
      (= (remainder (expt a n) n)
         (remainder a n)))

    (iter 1 n))

  (check-carmichael 561)
  (check-carmichael 1105)
  (check-carmichael 1729)
  (check-carmichael 2465)
  (check-carmichael 2821)
  (check-carmichael 6601)
  (check-carmichael 6602)
#+end_src

#+RESULTS:
: "561 is a carmichael number"
: "1105 is a carmichael number"
: "1729 is a carmichael number"
: "2465 is a carmichael number"
: "2821 is a carmichael number"
: "6601 is a carmichael number"
: "6602 is not a carmichael number"

** TODO 1.28
#+begin_src scheme
  (define (miller-rabin n)
    (define (square n)
      (* n n))

    (define (expmod base exp m)
      (cond ((= exp 0) 1)
            ((even? exp) (remainder (square (expmod base (/ exp 2) m))
                                    m))
            (else (remainder (* base (expmod base (- exp 1) m))
                             m))))

    (= (remainder 1 n)
       (expmod a (- n 1) n))
    )


  (miller-rabin 561)
  (miller-rabin 1105)
  (miller-rabin 1729)
  (miller-rabin 2465)
  (miller-rabin 2821)
  (miller-rabin 6601)
#+end_src
