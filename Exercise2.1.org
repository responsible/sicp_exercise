#+title: Exercise2.1
#+date: <2019-06-23 Sun>
#+author: responsible

* 2.1
** 2.1
#+begin_src scheme :results output :exports both
  (define (gcd x y)
    (let ((mod (remainder x y)))
      (if (= mod 0)
          y
          (gcd y mod))))

  (define (numer x) (car x))

  (define (demon x) (cdr x))

  (define (make-rat n d)
    (let ((g (gcd n d)))
      (if (< (/ n d) 0)
          (cons (- (abs (/ n g))) (abs (/ d g)))
          (cons (abs (/ n g)) (abs (/ d g))))))

  (define (print-rat x)
    (newline)
    (display (numer x))
    (display "/")
    (display (demon x)))

  (print-rat (make-rat 6 9))
  (print-rat (make-rat -6 9))
  (print-rat (make-rat 6 -9))
  (print-rat (make-rat -6 -9))
  (print-rat (make-rat -15 -11))
  (print-rat (make-rat 15 -11))
#+end_src

#+RESULTS:
:
: 2/3
: -2/3
: -2/3
: 2/3
: 15/11
: -15/11

** 2.2
#+begin_src scheme :results output :exports both
  (define (make-segment start-point end-point)
    (cons start-point end-point))

  (define (start-segment segment)
    (car segment))

  (define (end-segment segment)
    (cdr segment))

  (define (make-point x y)
    (cons x y))

  (define (x-point point)
    (car point))

  (define (y-point point)
    (cdr point))

  (define (midpoint-segment segment)
    (make-point (/ (+ (x-point (start-segment segment))
                      (x-point (end-segment segment)))
                   2)
                (/ (+ (y-point (start-segment segment))
                      (y-point (end-segment segment)))
                   2)))

  (define (print-point p)
    (newline)
    (display "(")
    (display (x-point p))
    (display ",")
    (display (y-point p))
    (display ")"))

  (define segment (make-segment (make-point 3 4)
                                (make-point 12 19)))
  (print-point (midpoint-segment segment))
#+end_src

#+RESULTS:
:
: (15/2,23/2)

** TODO 2.3
#+begin_src scheme
  (define (make-rectangle ))
#+end_src

** 2.4
#+begin_src scheme
  (define (cons x y)
    (lambda (m) (m x y)))

  (define (car z)
    (z (lambda (p q) p)))

  (car (cons x y))
  (car (lambda (m) (m x y)))
  ((lambda (m) (m x y)) (lambda (p q) p))
  ((lambda (p q) p) x y)
  x

  (define (cdr z)
    (z (lambda (p q) q)))
#+end_src

** TODO 2.5
#+begin_src scheme :results output :exports both
  (define (cons a b)
    (* (expt 2 a)
       (expt 3 b)))

  (define (car z)
    (/ (remainder z 3) 2))

  (define (cdr z)
    (/ z 3))

  (define cons1 (cons 1 1))
  (define cons2 (cons 3 0))
  (define cons3 (cons 7 11))

  (println (car cons1))
  (println (cdr cons1))

  (println (car cons2))
  (println (cdr cons2))

  (println (car cons3))
  (println (cdr cons3))
#+end_src

#+RESULTS:
: 3
: 0
: 4
: 0
: 11337408
: 0

** TODO 2.6
#+begin_src scheme
  (define zero (lambda (f) (lambda (x) x)))

  (define (add-1 n)
    (lambda (f) (lambda (x) (f ((n f) x)))))

  (add-1 zero)

  (add-1 (lambda (f) (lambda (x) x)))

  (lambda (f) (lambda (x) (f (((lambda (f) (lambda (x) x)) f) x))))
#+end_src

** 2.7
#+begin_src scheme
  (define (make-interval a b) (cons a b))

  (define (upper-bound x) (max (car x) (cdr x)))

  (define (lower-bound x) (min (car x) (cdr x)))
#+end_src

** 2.8
#+begin_src scheme
  (define (sub-interval x y)
    (make-interval (- (lower-bound y)
                      (upper-bound x))
                   (- (upper-bound y)
                      (lower-bound x))))
#+end_src
